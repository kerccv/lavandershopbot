require("dotenv").config();
const express = require("express");
const path = require("path");
const { Telegraf, Markup } = require("telegraf");
const fs = require("fs");
const csvParser = require("./utils/csvParser");
const supabase = require("./utils/supabaseClient");

const app = express();
app.use('/webapp', express.static(path.join(__dirname, '../webapp')));
app.listen(process.env.PORT || 5000, () => console.log("Web server running"));

const bot = new Telegraf(process.env.BOT_TOKEN);
const adminIds = process.env.ADMIN_IDS.split(",");

bot.start(async (ctx) => {
  const isAdmin = adminIds.includes(ctx.from.id.toString());
  await ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    Markup.keyboard([
      ["üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"],
      ...(isAdmin ? [["‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]] : []),
    ]).resize()
  );
});

bot.hears("üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", async (ctx) => {
  const url = process.env.WEBAPP_URL;
  await ctx.reply("–û—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω...", Markup.inlineKeyboard([
    Markup.button.webApp("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url)
  ]));
});

bot.hears("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", async (ctx) => {
  if (!adminIds.includes(ctx.from.id.toString())) return;
  await ctx.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", Markup.keyboard([
    ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã (CSV)"],
    ["üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"]
  ]).resize());
});

bot.hears("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã (CSV)", async (ctx) => {
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ):");
  bot.once("text", async (ctx2) => {
    const columns = ctx2.message.text.split(" ");
    await ctx2.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª.");
    bot.once("document", async (ctx3) => {
      const fileLink = await ctx3.telegram.getFileLink(ctx3.message.document.file_id);
      const result = await csvParser.parseFromUrl(fileLink.href, columns);
      for (const item of result) {
        await supabase.from("products").insert(item);
      }
      await ctx3.reply("–¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
    });
  });
});

bot.launch();